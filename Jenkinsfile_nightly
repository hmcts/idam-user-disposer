#!groovy

properties([
  // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('H 07 * * 1-5')]),
  parameters([
    string(name: 'SecurityRules',
      defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
      description: 'The URL you want to run these tests against'),
  ])
])

@Library("Infrastructure")

def type = "java"
def product = "disposer"
def component = "disposer-idam-user"

withNightlyPipeline(type, product, component) {

  enableAksStagingDeployment()
  disableLegacyDeployment()
  nonServiceApp()
  enableMutationTest()
  //enableFullFunctionalTest()
  enableSlackNotifications('#disposer-builds')
  enableFortifyScan()

  afterAlways('fortify-scan') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
  }

  afterAlways('mutationTest') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }

  afterAlways('securityScan') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
  }

  before('fullFunctionalTest') {
    //echo "Loading the secrets"
    //loadVaultSecrets(secrets)

    // Execute functional tests
    echo "Just waiting a while to ensure that the pod has run the job"
    sh "sleep 30s"
    echo "Verifying that functional test run correctly"
    try {
      builder.gradle('functional')
      //builder.gradleWithOutput('functional')
    } finally {
      junit '**/test-results/**/*.xml'
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/test-results/**'
    }
  }
}
