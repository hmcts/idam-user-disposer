buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("net.serenity-bdd:serenity-gradle-plugin:3.6.22")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'org.springframework.boot' version '3.1.1'
  id 'org.owasp.dependencycheck' version '8.3.1'
  id 'io.freefair.lombok' version '8.1.0'
  id 'com.github.ben-manes.versions' version '0.47.0'
  id 'org.sonarqube' version '4.2.1.3168'
  id "info.solidsoft.pitest" version '1.9.11'
}

apply plugin: "info.solidsoft.pitest"


pitest {
  pitestVersion.set('1.7.4')
  junit5PluginVersion.set('0.15')
  targetClasses = ['uk.gov.hmcts.reform.*']
  excludedClasses = [
          'uk.gov.hmcts.reform.ccd.madeup.*'
  ]
  threads = 10
  enableDefaultIncrementalAnalysis = true
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 50
  timeoutConstInMillis = 30000
  mutators.set([
          'CONDITIONALS_BOUNDARY',
          'INCREMENTS',
          'INVERT_NEGS',
          'MATH',
          'NEGATE_CONDITIONALS',
          'VOID_METHOD_CALLS',
          'EMPTY_RETURNS',
          'FALSE_RETURNS',
          'NULL_RETURNS',
          'PRIMITIVE_RETURNS',
          'TRUE_RETURNS',
          'REMOVE_CONDITIONALS'
  ])
}

project.tasks['pitest'].group = "Verification"

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.12.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonar {
  properties {
    property "sonar.projectName", "Reform :: disposer-idam-user"
    property "sonar.projectKey", "uk.gov.hmcts.reform:disposer-idam-user"
    property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.coverage.exclusions", "**/idam/Application.java"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}


// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  /*skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "pmd",
    "integrationTest",
    "functionalTest",
    "smokeTest",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]*/
}

dependencyManagement {
  dependencies {
    dependencySet(group: 'org.springframework.cloud', version: '4.0.3') {
      entry 'spring-cloud-starter-openfeign'
      entry 'spring-cloud-openfeign-core'
      entry 'spring-cloud-starter-contract-stub-runner'
    }
  }
  imports {
    mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2022.0.3'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext['snakeyaml.version'] = '2.0'

def versions = [
  cucumber          : '7.13.0',
  gradlePitest      : '1.9.11',
  jersey            : '3.1.2',
  junit             : '5.9.3',
  log4j             : '2.20.0',
  lombok            : '1.18.28'
]


dependencies {
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.0.1'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.1'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.1.0'
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-web', version: '3.4.14'
  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
  implementation group: 'io.rest-assured', name: 'rest-assured'
  implementation group: 'jakarta.ws.rs', name: 'jakarta.ws.rs-api', version: '3.1.0'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4j
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.log4j
  implementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version: versions.jersey
  implementation group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: versions.jersey
  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.1.0'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'

  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'io.cucumber', name: 'cucumber-spring', version: versions.cucumber
  testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: versions.cucumber
  testImplementation group: 'io.cucumber', name: 'cucumber-java', version: versions.cucumber
  testImplementation group: 'org.testcontainers', name: 'testcontainers', version: versions.testcontainers
  testImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.testcontainers
  testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8-standalone', version: '2.35.0'
  testImplementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

  testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
  testImplementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: '0.5'
  testImplementation group: 'org.junit', name: 'junit-bom', version: versions.junit, ext: 'pom'

  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine'

  integrationTestImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner'

  integrationTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
}

application {
  mainClass = 'uk.gov.hmcts.reform.idam.Application'
}


bootJar {
  archiveFileName = "disposer-idam-user.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
